package com.java.LMSProjectJstl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class LevHistoryDaoImp {
	static levHistoryDAO dao;
static StringBuilder sb;
Connection connection;
PreparedStatement pst;
	
static {
	//dao=new LevHistoryDaoImp();
	sb = new StringBuilder();
}

public boolean checkOverlap(levHistory lev) throws Exception {
	connection = ConnectionHelper.getConnection();
	String sql = "SELECT * FROM LEAVE_HISTORY WHERE EMP_ID=? AND ((LEAVE_START_DATE BETWEEN ? AND ?) OR (LEAVE_END_DATE BETWEEN ? AND ?))";
	pst = connection.prepareStatement(sql);
	pst.setInt(1, lev.getEmpId());
	pst.setDate(2, new java.sql.Date(lev.getStDate().getTime()));
	pst.setDate(3, new java.sql.Date(lev.getEndDate().getTime()));
	pst.setDate(4, new java.sql.Date(lev.getStDate().getTime()));
	pst.setDate(5, new java.sql.Date(lev.getEndDate().getTime()));
	ResultSet rs = pst.executeQuery();
	if (rs.next()) {
		return true;
	} else {
		return false;
	}
}

public boolean manager(int empId) throws SQLException, ClassNotFoundException {

	boolean b = false;
	connection=ConnectionHelper.getConnection();
	String cmd = "SELECT EMP_MANAGER_ID FROM EMPLOYEE WHERE EMP_ID = ?";
	pst = connection.prepareStatement(cmd);
	pst.setInt(1, empId);
	ResultSet rs = pst.executeQuery();
	if(rs.next())
	{
		int m = rs.getInt("EMP_MANAGER_ID");
		if(m == 0)
		{
			b = true;
		}
	}

	return b;

}

public boolean doValid(levHistory levHistory) throws Exception
{
	boolean isValid=true;
	if(levHistory.getStDate() != null)
	{
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
		Date date = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(date);
		c.add(Calendar.DATE, -1);
		String yestarday = sdf.format(c.getTime());

		if(levHistory.getStDate().equals(sdf.parse(yestarday)))
		{
			sb.append("Leave start date cannot be yesterday date..,");
			isValid=false;
		}
		if(levHistory.getEndDate().equals(sdf.parse(yestarday)))
		{
			sb.append("Leave End Date cannot be Yesterday date...,");
			isValid=false;
		}
		if(levHistory.getEndDate().before(levHistory.getStDate()))
		{
			sb.append("leave Start date cannot be greater than levave end date.....");
			isValid=false;
		}

	}
	return isValid;
}

	

}
