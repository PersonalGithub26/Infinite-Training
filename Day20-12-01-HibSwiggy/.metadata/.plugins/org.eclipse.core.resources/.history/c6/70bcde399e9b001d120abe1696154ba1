package com.cmsJsf;

import java.util.List;
import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

@ManagedBean(name = "mDao")
@SessionScoped
public class MenuDaoImp implements MenuDAO{

	private String localCode;
	private int menuId;
	private double price;
	private int reId;
	
	
	
	
	public int getReId() {
		return reId;
	}



	public void setReId(int reId) {
		this.reId = reId;
	}



	public double getPrice() {
		return price;
	}



	public void setPrice(double price) {
		this.price = price;
	}



	public String getLocalCode() {
		return localCode;
	}



	public void setLocalCode(String localCode) {
		this.localCode = localCode;
	}



	public int getMenuId() {
		return menuId;
	}



	public void setMenuId(int menuId) {
		this.menuId = menuId;
	}



	@Override
	public List<Menu> showMenuByRestaurant(int rid) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Menu.class);
		cr.add(Restrictions.eq("restaurantId", rid));
		List<Menu> list = cr.list();
		return list;
	}
	
	public Integer searchByMenuDao(String itemName)
	{
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Menu.class);
		
		cr.add(Restrictions.eq("menuItem", itemName));
		//cr.add(Restrictions.eq("restaurantId", restId));
		Projection projection = Projections.property("menuId");
		cr.setProjection(projection);
		Integer rid = (Integer) cr.uniqueResult();
		return rid;
	}
	
	public Menu searchByMenuId(int menuId, int restId) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Menu.class);
		cr.add(Restrictions.eq("menuId", menuId));
		cr.add(Restrictions.eq("restaurantId", restId));
		Menu menu = (Menu)cr.uniqueResult();
		return menu;
	}

	public void menuLocaleCodeChanged(ValueChangeEvent e){
		Map<String,Object> sessionMap = 
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap();		
		String rname = e.getNewValue().toString();
		Integer rid = searchByMenuDao(rname);
		Integer resId= searchByMenuDao(rname);
		this.menuId = rid;
		this.localCode=rname;
		this.reId=resId;
		Menu menu = searchByMenuId(this.menuId, this.reId);
		System.out.println("Menu  " +menu);
		sessionMap.put("menu", menu);
		System.out.println(menu.getMenuPrice());
		this.setPrice(menu.getMenuPrice());
		sessionMap.put("price", menu.getMenuPrice());
	}


	public List<String> showMenuItemNames(int rid) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Menu.class);
		cr.add(Restrictions.eq("restaurantId", rid));
		Projection projection = Projections.property("menuItem");
		cr.setProjection(projection);
		List<String> menuList = cr.list();
		return menuList;
	}
	
	
	
}
