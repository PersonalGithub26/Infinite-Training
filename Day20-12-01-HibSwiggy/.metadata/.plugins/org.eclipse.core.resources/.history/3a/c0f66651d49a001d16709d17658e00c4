package com.cmsJsf;

import java.util.Map;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projection;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;

@ManagedBean(name = "vDao")
@SessionScoped
public class VendorDaoImp implements VendorDAO{

private String localCode;
	
	private Integer restaurantId;
	
	@Override
	public String addVendorDao(Vendor vendor) {
		String pwd = EntryptPassword.getCode(vendor.getPassword());
		vendor.setPassword(pwd);
		SessionFactory sf = SessionHelper.getConnection();
		Session session =sf.openSession();
		Transaction trans = session.beginTransaction();
		session.save(vendor);
		trans.commit();
		return "Thanks.xhtml?faces-redirect=true";	
		
	}

	@Override
	public String validateMe(Vendor vendor) {
		String encr = EntryptPassword.getCode(vendor.getPassword());
		Map<String,Object> sessionMap = 
				FacesContext.getCurrentInstance().getExternalContext().getSessionMap();		
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Vendor.class);
		cr.add(Restrictions.eq("userName", vendor.getUserName()));
		cr.add(Restrictions.eq("password", encr.trim()));
		cr.setProjection(Projections.rowCount());
		long  count =(Long)cr.uniqueResult();
		if (count==1) {
			Vendor v = searchByVendorUser(vendor.getUserName());
			sessionMap.put("vendorInfo", v);
			return "VendorDashBoard.xhtml?faces-redirect=true";			
		} else {
			sessionMap.put("error", "Invalid Credentials...");
			return "VendorLogin.xhtml?faces-redirect=true";
		}

		
	}

	@Override
	public Vendor searchByVendorUser(String userName) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session =sf.openSession();
		Criteria cr = session.createCriteria(Vendor.class);
		cr.add(Restrictions.eq("userName", userName));
		Vendor vendor = (Vendor)cr.uniqueResult();
		return vendor;
		
	}
	
	
	public Integer searchByRestaurantDao(String restaurantName) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Restaurant.class);
		cr.add(Restrictions.eq("restaurantName", restaurantName));
		Projection projection = Projections.property("restaurantId"); 
		cr.setProjection(projection); 
		Integer rid = (Integer)cr.uniqueResult();
		System.out.println("method " +rid);
		return rid;
	}

	public void restaurantLocaleCodeChanged(ValueChangeEvent e){
		String rname = e.getNewValue().toString();
		Integer rid = searchByRestaurantDao(rname);
		//System.out.println(rname);
		this.restaurantId = rid;
		this.localCode=rname;
	}
	
	

}
